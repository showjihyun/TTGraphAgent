# MVP 개발 상세 기획안

---

## 1. 폴더 구조 및 각 폴더별 역할

```
DBGraphAgent/
├── backend/                # 백엔드 FastAPI 서버
│   ├── main.py             # 진입점, FastAPI 앱 실행
│   ├── routers/            # API 라우터 (extract, graph, rag 등)
│   ├── services/           # 비즈니스 로직, LLM 연동, Neo4j 연동 등
│   └── agents/             # 에이전트/확장 로직 (rule-based, LLM 기반)
├── frontend/               # 프론트엔드 React 앱
│   ├── public/             # 정적 파일 (favicon, index.html 등)
│   └── src/                # React 소스코드 (components, pages, hooks 등)
├── data/                   # 샘플 데이터, 테스트 문서
│   └── samples/            # 예시 입력 문서, 추출 결과 등
├── neo4j/                  # Neo4j 도커 설정, 초기 스크립트
├── prompt_templates/       # LLM 프롬프트 템플릿
├── README.md               # 프로젝트 설명 및 실행 가이드
└── docker-compose.yml      # 전체 서비스 오케스트레이션
```

### 폴더별 상세 역할
- **backend/**: FastAPI 기반 API 서버, LLM 연동, Neo4j 연동, 에이전트 확장 로직 포함
- **frontend/**: React+D3.js 기반 UI, 입력/업로드, 그래프 시각화, (옵션) 질의응답
- **data/**: 샘플 문서, 테스트 데이터, 예시 추출 결과
- **neo4j/**: Neo4j 도커 설정, 초기 데이터 로딩 스크립트
- **prompt_templates/**: LLM 프롬프트 샘플 및 버전 관리
- **docker-compose.yml**: Neo4j, 백엔드, 프론트엔드 컨테이너 통합 실행

---

## 2. 전체 시스템 아키텍처 (MVP 범위)

### 계층별 구조 및 주요 기술

#### 🎨 Frontend Layer
- **React** (Vite, TypeScript 권장)
- **D3.js**: 그래프 시각화
- **Zustand**: 글로벌 상태 관리
- **React Router**: 라우팅
- **Axios**: API 통신
- **Tailwind CSS**: UI 스타일링

#### ⚡ Backend Layer
- **FastAPI** (Python 3.11+)
- **Routers**: /extract, /graph, /rag 등 REST API
- **Services**: LLM API 연동, Neo4j 연동, 데이터 가공
- **Agents**: Rule-based/LLM 기반 그래프 확장
- **Middleware**: CORS, JWT(옵션), Rate Limiting(옵션)

#### 💾 Database Layer
- **Neo4j**: 지식 그래프 저장 (Bolt 연결)
- (MVP에서는 PostgreSQL/Redis 미포함, 필요시 확장)

#### ☁️ Infrastructure
- **Docker, docker-compose**: 전체 서비스 컨테이너화
- **(옵션) Nginx**: Reverse Proxy, 정적 파일 서빙

#### 🔧 개발 도구
- **Swagger UI**: FastAPI 자동 문서화 (/docs)
- **React DevTools, Zustand DevTools**: 프론트 디버깅

---

## 3. 계층별 구현 포인트 및 MVP 범위

### 1) 프론트엔드 (frontend/)
- 텍스트 입력/파일 업로드 폼 구현
- 추출 결과 그래프(D3.js) 시각화
- (옵션) 자연어 질의 입력 및 응답 UI
- API 연동(Axios), 상태 관리(Zustand)

### 2) 백엔드 (backend/)
- /extract: 문서 입력 → LLM 추출 결과 반환
- /graph: 추출 결과 → Neo4j 저장/조회
- (옵션) /rag: 자연어 질의 → GraphRAG 응답
- Neo4j Bolt 드라이버 연동
- LLM API 연동(OpenAI, LLaMA3 등)
- (옵션) 간단한 에이전트 기반 그래프 확장

### 3) 데이터/프롬프트/Neo4j
- 샘플 문서, 추출 결과, 프롬프트 템플릿 관리
- Neo4j 도커 설정, 초기 데이터 스크립트

### 4) 인프라
- docker-compose로 Neo4j, backend, frontend 통합 실행
- (옵션) Nginx reverse proxy

---

## 4. MVP에서 실제 구현할 범위/제외 범위

### ✅ 포함 (MVP)
- 단일 문서 입력(텍스트/파일)
- LLM 기반 엔티티/관계/이벤트 추출
- Neo4j 그래프 저장/조회
- D3.js 기반 시각화
- (옵션) 간단한 그래프 확장/보강

### ❌ 제외 (MVP 이후 확장)
- 멀티문서/대용량 배치 처리
- 사용자 인증/권한 관리(JWT 등)
- PostgreSQL, Redis 등 추가 DB
- 고급 에이전트 오케스트레이션, confidence/provenance
- SaaS 배포, 과금, 모니터링 등

---

## 5. 참고: 전체 아키텍처 다이어그램 (요약)

- Frontend(React+D3) ↔ Backend(FastAPI) ↔ Neo4j
- docker-compose로 통합 실행
- (옵션) Nginx, Swagger UI, DevTools

---

